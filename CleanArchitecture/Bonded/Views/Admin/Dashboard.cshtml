@model dynamic
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <title>Admin Dashboard</title>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            background-color: linen;
        }

        .main-container {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            padding: 20px;
        }

        .dashboard-container {
            background-color: #fff;
            padding: 30px;
            box-shadow: 0 3px 4px rgba(0, 0, 0, 0.4);
            margin-top: 30px;
            width: 100%; /* Remove container */
            border-radius: 12px;
            position: relative; /* For the floating button */
        }

        footer {
            text-align: center;
            position: relative;
            bottom: 0;
            width: 100%;
        }

        .dashboard-container h2 {
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }

        .chart-container {
            margin: 20px 0;
        }

        .btn {
            background-color: #000;
            color: #fff;
            font-weight: bold;
            border-radius: 5px;
        }

            .btn:hover {
                   transform: scale(1.05);
                background-color: #004080;
                color: #fff;
            }

        /* Floating button for managing carousel */
        .btn-manage-carousel {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #000;
            color: #fff;
            border-radius: 5px;
            padding: 10px 15px;
            font-size: 14px;
            text-align: center;
            cursor: pointer;
        }

            .btn-manage-carousel:hover {
                background-color: #004080;
            }

        /* Ensure graphs are in a single row */
        .graphs-row {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 20px;
        }

        .graph-container {
            flex: 1;
            min-width: 300px;
        }

    </style>
</head>
<body>

    <div class="main-container">
        <div class="dashboard-container">
            <button class="btn-manage-carousel fw-bolder btn" style="border-radius:20px"onclick="window.location.href='@Url.Action("ManageCarousel", "Admin")'">
                <i class="fw-bolder bi bi-images"></i> Manage Carousel
            </button>

            <h2 class="mt-2 mb-5">SYSTEM INSIGHTS</h2>

            <!-- All Graphs in a single row with wrapping -->
            <div class="graphs-row">

                <!-- Users Growth Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Users Growth</h4>
                    <canvas id="usersChart" height="100"></canvas>
                </div>

                <!-- Posts Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Posts</h4>
                    <canvas id="postsChart" height="100"></canvas>
                </div>

                <!-- Likes Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Likes</h4>
                    <canvas id="likesChart" height="100"></canvas>
                </div>

                <!-- Comments Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Comments</h4>
                    <canvas id="commentsChart" height="100"></canvas>
                </div>

                <!-- Follows Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Follows</h4>
                    <canvas id="followsChart" height="100"></canvas>
                </div>

                <!-- Messages Graph -->
                <div class="graph-container">
                    <h4 class="fw-bold">Messages</h4>
                    <canvas id="messagesChart" height="100"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>

         // Initial data for all charts (Users, Posts, Likes, Comments, Follows, Messages)
         let usersData = [5];  // Start with initial count (you can set to any static number initially)
         let postsData = [10];
         let likesData = [15];
         let commentsData = [20];
         let followsData = [25];
         let messagesData = [30];

         const usersChartCtx = document.getElementById('usersChart');
         const postsChartCtx = document.getElementById('postsChart');
         const likesChartCtx = document.getElementById('likesChart');
         const commentsChartCtx = document.getElementById('commentsChart');
         const followsChartCtx = document.getElementById('followsChart');
         const messagesChartCtx = document.getElementById('messagesChart');

         // Create Users Chart (Line Graph)
         const usersChart = new Chart(usersChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],  // Initial label
                 datasets: [{
                     label: 'Users Growth',
                     data: usersData,
                     borderColor: 'rgba(75, 192, 192, 1)',
                     backgroundColor: 'rgba(75, 192, 192, 0.2)',
                     fill: true,
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Create Posts Chart (Line Graph)
         const postsChart = new Chart(postsChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],
                 datasets: [{
                     label: 'Total Posts',
                     data: postsData,
                     borderColor: 'rgba(54, 162, 235, 1)',
                     backgroundColor: 'rgba(54, 162, 235, 0.2)',
                     fill: true,
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Create Likes Chart (Line Graph)
         const likesChart = new Chart(likesChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],
                 datasets: [{
                     label: 'Total Likes',
                     data: likesData,
                     borderColor: 'rgba(255, 206, 86, 1)',
                     backgroundColor: 'rgba(255, 206, 86, 0.2)',
                     fill: true,
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Create Comments Chart (Line Graph)
         const commentsChart = new Chart(commentsChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],
                 datasets: [{
                     label: 'Total Comments',
                     data: commentsData,
                     borderColor: 'rgba(231, 74, 59, 1)',
                     backgroundColor: 'rgba(231, 74, 59, 0.2)',
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Create Follows Chart (Line Graph)
         const followsChart = new Chart(followsChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],
                 datasets: [{
                     label: 'Total Follows',
                     data: followsData,
                     borderColor: 'rgba(153, 102, 255, 1)',
                     backgroundColor: 'rgba(153, 102, 255, 0.2)',
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Create Messages Chart (Line Graph)
         const messagesChart = new Chart(messagesChartCtx, {
             type: 'line',
             data: {
                 labels: ['0'],
                 datasets: [{
                     label: 'Total Messages',
                     data: messagesData,
                     borderColor: 'rgba(255, 159, 64, 1)',
                     backgroundColor: 'rgba(255, 159, 64, 0.2)',
                     borderWidth: 2
                 }]
             },
             options: {
                 scales: {
                     y: { beginAtZero: true }
                 }
             }
         });

         // Function to generate random number changes for simulation
         function getRandomChange() {
             return Math.floor(Math.random() * 5) - 2; // Random change between -2 and +2
         }

         // Update the data dynamically
         setInterval(() => {
             // Apply random change to each dataset
             usersData.push(usersData[usersData.length - 1] + getRandomChange());
             postsData.push(postsData[postsData.length - 1] + getRandomChange());
             likesData.push(likesData[likesData.length - 1] + getRandomChange());
             commentsData.push(commentsData[commentsData.length - 1] + getRandomChange());
             followsData.push(followsData[followsData.length - 1] + getRandomChange());
             messagesData.push(messagesData[messagesData.length - 1] + getRandomChange());

             // Ensure the graph only shows the last few points (e.g., limit to 10 points)
             const MAX_POINTS = 10;
             if (usersData.length > MAX_POINTS) usersData.shift();
             if (postsData.length > MAX_POINTS) postsData.shift();
             if (likesData.length > MAX_POINTS) likesData.shift();
             if (commentsData.length > MAX_POINTS) commentsData.shift();
             if (followsData.length > MAX_POINTS) followsData.shift();
             if (messagesData.length > MAX_POINTS) messagesData.shift();

             // Update the labels
             const newLabel = usersChart.data.labels.length; // New label is the number of data points
             usersChart.data.labels.push(newLabel);
             postsChart.data.labels.push(newLabel);
             likesChart.data.labels.push(newLabel);
             commentsChart.data.labels.push(newLabel);
             followsChart.data.labels.push(newLabel);
             messagesChart.data.labels.push(newLabel);

             // Limit labels to last few points
             if (usersChart.data.labels.length > MAX_POINTS) usersChart.data.labels.shift();
             if (postsChart.data.labels.length > MAX_POINTS) postsChart.data.labels.shift();
             if (likesChart.data.labels.length > MAX_POINTS) likesChart.data.labels.shift();
             if (commentsChart.data.labels.length > MAX_POINTS) commentsChart.data.labels.shift();
             if (followsChart.data.labels.length > MAX_POINTS) followsChart.data.labels.shift();
             if (messagesChart.data.labels.length > MAX_POINTS) messagesChart.data.labels.shift();

             // Update charts with the new data
             usersChart.data.datasets[0].data = usersData;
             postsChart.data.datasets[0].data = postsData;
             likesChart.data.datasets[0].data = likesData;
             commentsChart.data.datasets[0].data = commentsData;
             followsChart.data.datasets[0].data = followsData;
             messagesChart.data.datasets[0].data = messagesData;

             // Redraw the charts
             usersChart.update();
             postsChart.update();
             likesChart.update();
             commentsChart.update();
             followsChart.update();
             messagesChart.update();
         }, 1000); // Update every second


    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
