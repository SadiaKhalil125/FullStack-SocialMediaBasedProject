@model Bonded.Models.ViewModels.ChatViewModel
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <title>Chat</title>
    <style>
        html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        background-color: whitesmoke;
        }

        footer {
        text-align: center;
        position: relative;
        bottom: 0;
        width: 100%;
        }

        .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 600px;
        margin: 50px auto;
        color:white;
            border-radius: 5px;
            box-shadow: 0px 2px 2px 2px rgba(0, 0, 0, 0.1);
       }

        .chat-header {
        display: flex;
        align-items: center;
        padding: 15px 20px;
        background-color: black;
        color: white;
        }

        .chat-header .profile-picture {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 8px;
        }

        .chat-box {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        background-color: #f1f1f1;
        display: flex;
        flex-direction: column;
        }

        .message {
        display: flex;
        align-items: flex-start;
        margin: 10px 0;
        position: relative;
        }

        .message.sent {
        justify-content: flex-end;
        text-align: right;
        }

        .message.received {
        justify-content: flex-start;
        }

        .message .text {
        max-width: 60%;
        padding: 10px 15px;
        border-radius: 10px;
        font-size: 14px;
        line-height: 1.5;
        position: relative;
        }

        .message.sent .text {
        background-color: skyblue;
        color: white;
        }

        .message.received .text {
        background-color: #e9ecef;
        color: #343a40;
        }

        .message img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin: 0 10px;
        }

        .delete-btn {
        background: none;
        border: none;
        color: red;
        font-size: 14px;
        cursor: pointer;
        position: absolute;
        top: -5px;
        right: -10px;
        }

        .send-message {
        display: flex;
        padding: 10px 15px;
        background-color: white;
        border-top: 1px solid #dee2e6;
        }

        .send-message textarea {
        flex-grow: 1;
        margin-right: 10px;
        border-radius: 10px;
        }

        .send-message button {
        border-radius: 50%;
        width: 50px;
        height: 50px;
        }
        /* Sent messages container */
        /* Sent messages container */
      

            /* Move delete button to the extreme left of the chat container */
        .sent {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            position: relative;
        }

            .sent .delete-btn {
                position: absolute;
                left: -560px; /* Moves the button to the extreme left of the chat container */
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                color: darkgrey;
                font-size: 18px;
                cursor: pointer;
            }



    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <a class="fw-bold fs-5" style="color:white; text-decoration:none;" href="@Url.Action("ViewOtherProfiles", "User", new { id = ViewBag.ReceiverId})">
                <img src="@ViewBag.ProfilePicture" alt="Profile Picture" class="profile-picture">
                @ViewBag.Username
            </a>
        </div>

        <div class="chat-box"style="background-color:white" id="chat-box">
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.Sender.Id == ViewBag.CurrentUserId ? "sent" : "received")" data-id="@message.Message.Id">
                    @if (message.Sender.Id == ViewBag.CurrentUserId)
                    {
                        <button class="delete-btn" onclick="deleteMessage('@message.Message.Id', this)">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    }
                    <img src="@message.Sender.ProfilePicture" alt="Profile Picture">
                    <div class="text">
                        @message.Message.Text
                        <br>
                        <small class="text-muted">@message.Message.Timestamp.ToString("hh:mm tt")</small>
                    </div>
                </div>
            }



        </div>

        <input type="hidden" value="@ViewBag.CurrentUserId" id="senderId">
        <input type="hidden" value="@ViewBag.ReceiverId" id="receiverId">

        <div class="send-message"style="background-color:whitesmoke;">
            <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
            <button class="btn btn-dark ms-2" onclick="sendMessage()">
                <i class="bi bi-send"></i>
            </button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/chat.js"></script>

    <script>
            function deleteMessage(messageId, button) {
            $.ajax({
                url: '/Chat/DeleteMessage/',
                type: "POST",
                data: { msgId: messageId }, // Sending messageId in case the server needs it
                success: function(response) {
                    if (response.success) { // Assuming the server responds with { success: true }
                        const messageElement = $(button).closest(".message");
                        if (messageElement.length) {
                            messageElement.remove();
                        }
                    } else {
                        alert(response.message || "Failed to delete message.");
                    }
                },
                error: function(xhr, status, error) {
                    console.error("DeleteMessage Error:", error);
                    alert("An error occurred while deleting the message.");
                }
            });
        }
                function sendMessage() {
            const senderId = document.getElementById("senderId").value;
            const receiverId = document.getElementById("receiverId").value;
            const message = document.getElementById("messageInput").value;

            if (!senderId || !receiverId || !message) {
                alert("Please enter sender ID, receiver ID, and a message.");
                return;
            }

            connection.invoke("SendMessage", senderId, receiverId, message)
                .catch(err => console.error("SendMessage Error: ", err.toString()));

            document.getElementById("messageInput").value = "";
        }


    </script>
</body>
</html>
